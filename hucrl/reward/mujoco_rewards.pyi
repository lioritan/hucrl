from abc import ABCMeta
from typing import Any, Optional

from rllib.dataset.datatypes import TupleDistribution
from rllib.reward import AbstractReward
from torch import Tensor

class MujocoReward(AbstractReward, metaclass=ABCMeta):
    dim_action: int
    action_scale: float
    action_cost: float
    sparse: bool
    reward_ctrl: Tensor
    reward_state: Tensor
    def __init__(
        self, action_cost: float = ..., sparse: bool = ..., goal: Optional[Tensor] = ...
    ) -> None: ...
    def action_reward(self, action: Tensor) -> Tensor: ...
    def get_reward(
        self, reward_state: Tensor, reward_control: Tensor
    ) -> TupleDistribution: ...

class CartPoleReward(MujocoReward):
    dim_action: int = ...
    def __init__(
        self, action_cost: float = ..., pendulum_length: float = 0.6
    ) -> None: ...
    def forward(self, *args: Tensor, **kwargs: Any) -> TupleDistribution: ...
    def _get_ee_pos(self, x0: Tensor, theta: Tensor) -> Tensor: ...

class HalfCheetahReward(MujocoReward):
    dim_action: int = ...
    dt: float
    def __init__(self, action_cost: float = ...) -> None: ...
    def forward(self, *args: Tensor, **kwargs: Any) -> TupleDistribution: ...

class HalfCheetahV2Reward(MujocoReward):
    dim_action: int = ...
    def __init__(self, action_cost: float = ...) -> None: ...
    def forward(self, *args: Tensor, **kwargs: Any) -> TupleDistribution: ...

class PusherReward(MujocoReward):
    dim_action: int = ...
    def __init__(self, action_cost: float = ..., goal: Tensor = ...) -> None: ...
    def forward(self, *args: Tensor, **kwargs: Any) -> TupleDistribution: ...
    @staticmethod
    def get_ee_position(state: Tensor) -> Tensor: ...

class ReacherReward(MujocoReward):
    dim_action: int = ...
    length_scale: float
    def __init__(
        self, action_cost: float = ..., sparse: bool = ..., goal: Optional[Tensor] = ...
    ) -> None: ...
    def forward(self, *args: Tensor, **kwargs: Any) -> TupleDistribution: ...
    @staticmethod
    def get_ee_position(state: Tensor) -> Tensor: ...
